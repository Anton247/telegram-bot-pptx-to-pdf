import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import datetime
from datetime import timedelta
import uuid
import os
from settings import TOKEN
from sqlite3.dbapi2 import Cursor
from PPTX_GENERATOR import PPTX_GENERATOR 
import sqlite3
API_TOKEN = TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

mess = {}       #–¢—É—Ç –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
mess_time = datetime.date.today()   #–•—Ä–∞–Ω–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"]
keyboard.add(*buttons)
last_time = datetime.datetime.now()
@dp.message_handler(commands=['start', 'help', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç, "+ message.from_user.first_name + "!\nüëãüèºüòÄ\n–Ø –ö–≤–∞–Ω—Ç–æ—à–∞, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –¥–Ω—è\
		–æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", reply_markup=keyboard)

@dp.message_handler(Text(equals="–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"))
async def certificate(message: types.Message):
	await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û", reply_markup=keyboard)

@dp.message_handler()
async def echo(message: types.Message):
	global mess
	global mess_time
	if mess_time != datetime.date.today(): #–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		mess = {}
		mess_time = datetime.date.today()   #–•—Ä–∞–Ω–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
	check = 1
	if message.from_user.id not in mess: #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è
		mess[message.from_user.id] = datetime.datetime.now()
	elif (datetime.datetime.now() - mess[message.from_user.id]).total_seconds() < 10: #–°—Ç–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
		await message.answer('–ú–Ω–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å')
		check = 0
	if check:
		mess[message.from_user.id] = datetime.datetime.now()
		await message.answer("–¢–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
		now = str(datetime.date.today().day)
		now += "-" + str(datetime.date.today().month)
		now += "-" + str(datetime.date.today().year)
		UID = uuid.uuid4().hex #—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
		file = PPTX_GENERATOR(message.text, UID, now)
		file = file.replace(" ", "¬©")
		command = "python PPTX_to_PDF.py " + file + " " + now
		res = os.system(command)  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è	
		file = file.replace("¬©", " ")
		doc = open('./GENERATED_PDF/' + now + '/' + file + ".pdf", 'rb')
		await message.reply_document(doc)

		connect = sqlite3.connect('users.db')
		cursor = connect.cursor()
		cursor.execute("""CREATE TABLE IF NOT EXISTS users(
				user_id TEXT PRIMARY KEY,
				user_name TEXT,
				date TEXT,
				time TEXT,
				source TEXT,
				uname_source TEXT,
				uid_source TEXT
				)
				""")	
		now_time = datetime.datetime.now()
		users_list = [UID, message.text, now, now_time.strftime("%H:%M:%S"), "Telegram", message.from_user.username, message.from_user.id]
		cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?);", users_list)
		connect.commit()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)